name: Docker Build and Push

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  # IMAGE_NAME is now derived directly from the repository name in the steps below
  # This is the recommended practice by the docker/metadata-action
  # env.IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # The packages permission is required to push to the GitHub Container Registry
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            # push main branch as type=edge
            type=edge,branch=master
            # push semantic version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # push latest tag for default branch
            type=schedule,pattern=latest,branch=master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push multi-platform image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          # This builds and pushes all platforms in a single step
          platforms: linux/amd64,linux/arm64
          # The push flag is essential to actually push the image to the registry
          push: true
          # The tags are derived from the metadata step
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Caching helps to speed up subsequent builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Inspect image
        run: |
          echo "Image successfully pushed. Inspecting the final manifest:"
          docker buildx imagetools inspect ${{ steps.meta.outputs.tags }}